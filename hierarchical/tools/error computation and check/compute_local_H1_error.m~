function err = compute_local_H1_error(u, uex, graduex, hmsh, hspace, flag)

%val = hspline_eval (u, hmsh, hspace, 0);
[valgrad,pts] = hspline_eval (u, hmsh, hspace, 0, 'gradient');

switch hmsh.ndim
    case 1,
        %valex = uex (pts(1,:,:));
        gradex = graduex (pts(1,:,:));
    case 2,
        %valex = uex (pts(1,:,:), pts(2,:,:));
        gradex = graduex (pts(1,:,:), pts(2,:,:));
    case 3,
        %valex = uex (pts(1,:,:), pts(2,:,:), pts(3,:,:));
        gradex = graduex (pts(1,:,:), pts(2,:,:), pts(3,:,:));
end
nqn = hmsh.mesh_of_level(1).nqn;
%valex = reshape (valex, hmsh.nqn, hmsh.nel);
gradex = reshape (gradex, hmsh.rdim, hmsh.nqn, hmsh.nel);

%jw = hmsh.quad_weights .* hmsh.jacdet;
quad_weights = [];
jacdet = [];
for ilev = 1:hmsh.nlevels % Active levels
    if (hmsh.msh_lev{ilev}.nel ~= 0)
        quad_weights = cat(2,quad_weights, hmsh.msh_lev{ilev}.quad_weights);
        jacdet = cat(2,jacdet, hmsh.msh_lev{ilev}.jacdet);
    end
end
jw = quad_weights .* jacdet;

% errl2_elem = sqrt (sum (jw .* (val - valex).^2, 1));

aux = reshape (sum ((valgrad - gradex).^2, 1), hmsh.nqn, hmsh.nel);

switch flag
    case 'elements',
        err = sqrt (sum (aux.*jw, 1));
    case 'functions',
        err = zeros(hspace.ndof,1);
        ndof_per_level = hspace.ndof_per_level;
        dif = hmsh.nlevels - hspace.nlevels;
        if dif
            ndof_per_level = [ndof_per_level(:); zeros(dif,1)];
        end
        ndofs = 0;
        Ne = cumsum([0; hmsh.nel_per_level(:)]);
        for ilev = 1:hmsh.nlevels % Active levels
            ndofs = ndofs + ndof_per_level(ilev);
            if hmsh.msh_lev{ilev}.nel
                ind_e = (Ne(ilev)+1):Ne(ilev+1);
                b_lev = op_f_v (hspace.sp_lev{ilev}, hmsh.msh_lev{ilev}, aux(:,ind_e));
                
                dofs = 1:ndofs; % Active dofs from level 1 to ilev, in the numbering of the hierarchical space, whatever it is
                err(dofs) = err(dofs) + hspace.C{ilev}'*b_lev;
            end
        end
        
        err = sqrt(hspace.coeff(:).*err);
        
end